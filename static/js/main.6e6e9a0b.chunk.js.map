{"version":3,"sources":["firebase.js","redux/pbDucks.js","redux/pedalDucks.js","redux/userPBDucks.js","redux/store.js","components/SearchPB.jsx","components/SearchPedal.jsx","components/ActualPedal.jsx","components/ItemTypes.js","components/PedalContainer.jsx","components/PBContainer.jsx","App.jsx","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","initialData","id","PBName","PBBrand","PBImage","PBHeight","PBWidth","setPBAction","pb","dispatch","getState","a","arrayData","arrayDataAux","localStorage","getItem","JSON","parse","collection","get","data","docs","map","doc","setItem","stringify","find","sPB","type","payload","console","log","Name","Brand","Type","Image","Video","Height","Width","setPedalAction","pedal","sPed","userPedals","rootReducer","combineReducers","pedalboard","state","action","actualPedal","userPB","Math","random","toString","substr","newPedal","key","left","top","key2","omit","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","SearchPB","useDispatch","React","useState","pbs","setPbs","savedPBs","setSavedPBs","useEffect","obtenerDatos","setPedalBoard","loadedPB","setLoadedPB","visibleSavedPBs","setVisibleSavedPBs","obtainSavedPBs","data2","arrayData2","useSelector","store","savePB","pbName","prompt","pbToSave","Pedals","Pedalboard","User","add","noValidate","autoComplete","TextField","select","label","value","onChange","event","target","err","setLoadPBAction","MenuItem","Button","onClick","size","color","variant","helperText","option","SearchPedal","pedals","setPedals","selPedal","setSelPedal","useStyles","makeStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","ActualPedal","actPedal","classes","addPedalToPB","image","width","height","pedalID","Card","className","CardContent","Typography","gutterBottom","component","src","style","alt","CardActions","justifyContent","url","controls","ItemTypes","position","padding","cursor","backgroundSize","backgroundRepeat","PedalContainer","hideSourceOnDrag","children","deletePedal","setDeletePedalAction","useDrag","item","collect","monitor","isDragging","drag","ref","backgroundImage","IconButton","aria-label","PBContainer","actPedalboard","styles","pbContainer","useDrop","accept","drop","delta","getDifferenceFromInitialOffset","round","x","y","moveBox","setMovePedalAction","Object","keys","theme","flexGrow","paper","spacing","textAlign","palette","text","secondary","FullWidthGrid","createStore","applyMiddleware","thunk","Grid","container","xs","Paper","DndProvider","backend","HTML5Backend","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e6e9a0b.chunk.js","sourcesContent":["// Your web app's Firebase configuration\r\nimport firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBXbDlB7l3dP-FiF9TBBk8v9rgnx359BME\",\r\n    authDomain: \"pedalvision-9ea13.firebaseapp.com\",\r\n    databaseURL: \"https://pedalvision-9ea13.firebaseio.com\",\r\n    projectId: \"pedalvision-9ea13\",\r\n    storageBucket: \"pedalvision-9ea13.appspot.com\",\r\n    messagingSenderId: \"437452844119\",\r\n    appId: \"1:437452844119:web:588adb82ef9bcd6f4e4712\",\r\n    measurementId: \"G-TSHSPTWWM1\"\r\n  };\r\n  // Initialize Firebase\r\n  \r\nconst fb =  firebase.initializeApp(firebaseConfig);\r\nexport const db = fb.firestore();\r\n\r\n//firebase.analytics();","import {db} from '../firebase';\r\n\r\n//CONSTANTS\r\nconst initialData = {\r\n    id:\"\",\r\n    PBName:\"\",\r\n    PBBrand:\"\",\r\n    PBImage:\"\",\r\n    PBHeight:\"\",\r\n    PBWidth:\"\"\r\n}\r\n\r\nconst SET_PB = 'SET_PB'\r\n\r\n//REDUCER\r\nexport default function pbReducer(state = initialData, action){\r\n    switch(action.type){\r\n        case SET_PB:\r\n            //These '...' are to get al the elements of the state and the payload at the same time\r\n            return {...state,...action.payload}\r\n        default:    \r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//ACTIONS\r\nexport const setPBAction = (pb) => async(dispatch, getState) => {\r\n\r\n    try{\r\n\r\n        let arrayData = {}\r\n        let arrayDataAux = []\r\n        //IF the values of the pbs are in the local storage we will get them from there\r\n        if(localStorage.getItem(\"avPBs\")){\r\n            arrayDataAux = JSON.parse(localStorage.getItem(\"avPBs\"))\r\n        }\r\n        //If the values of pbs arent in LS there are getting from the DB\r\n        else{\r\n            const data = await db.collection('pedalboards').get()\r\n            arrayDataAux = data.docs.map(doc => ({id:doc.id, ...doc.data()}))\r\n            //Saving in localStorage for future consults\r\n            localStorage.setItem(\"avPBs\",JSON.stringify(arrayDataAux))\r\n        }\r\n        //Searching for the selected PB data\r\n        arrayData = arrayDataAux.find(sPB => sPB.id === pb)\r\n        \r\n        dispatch({\r\n            type: SET_PB,\r\n            //With this we send all of the data of the PB Collection selected\r\n            payload: arrayData\r\n            \r\n        })\r\n    }\r\n    catch(err){\r\n        console.log(err)\r\n    }\r\n    \r\n}\r\n","//This file is for managing the current pedal selected by the user\r\nimport {db} from '../firebase';\r\n\r\n//CONSTANTS\r\nconst initialData = {\r\n    id:\"\",\r\n    Name:\"\",\r\n    Brand:\"\",\r\n    Type:\"\",\r\n    Image:\"\",\r\n    Video:\"\",\r\n    Height:\"\",\r\n    Width:\"\"\r\n}\r\n\r\nconst SET_PEDAL = 'SET_PEDAL'\r\n\r\n//REDUCER\r\nexport default function pedalReducer(state = initialData, action){\r\n    switch(action.type){\r\n        case SET_PEDAL:\r\n            //These '...' are to get al the elements of the state and the payload at the same time\r\n            return {...state,...action.payload}\r\n        default:    \r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//ACTIONS\r\nexport const setPedalAction = (pedal) => async(dispatch, getState) => {\r\n\r\n    try{\r\n\r\n        let arrayData = {}\r\n        let arrayDataAux = []\r\n        //IF the values of the pedals are in the local storage we will get them from there\r\n        if(localStorage.getItem(\"avPedals\")){\r\n            arrayDataAux = JSON.parse(localStorage.getItem(\"avPedals\"))\r\n        }\r\n\r\n        //IF there are no data on local storage we check on the data base\r\n        else{\r\n            const data = await db.collection('pedals').get()\r\n            arrayDataAux = data.docs.map(doc => ({id:doc.id, ...doc.data()}))\r\n            //Saving in localStorage for future consults\r\n            localStorage.setItem(\"avPedals\",JSON.stringify(arrayDataAux))\r\n        }\r\n        //Searching for the selected pedal data\r\n        arrayData = arrayDataAux.find(sPed => sPed.id === pedal)\r\n          \r\n        dispatch({\r\n            type: SET_PEDAL,\r\n            //With this we send all of the data of the PB Collection selected\r\n            payload: arrayData\r\n            \r\n        })\r\n    }\r\n    catch(err){\r\n        console.log(err)\r\n    }\r\n    \r\n}","//This library are for simplifly the process of updating and deleting objects in the state\r\nimport { omit } from 'lodash'\r\n\r\n//CONSTANTS\r\nconst initialData = {\r\n    userPedals:{}\r\n}\r\n\r\n\r\nconst SET_USERPB = 'SET_USERPB'\r\nconst SET_MOVEPEDAL = 'SET_MOVEPEDAL'\r\nconst SET_DELETEPEDAL = 'SET_DELETEPEDAL'\r\nconst SET_LOADPB = 'SET_LOADPB'\r\n\r\n\r\n\r\n//REDUCER\r\nexport default function userPBReducer(state = initialData, action){\r\n    switch(action.type){\r\n        case SET_USERPB:\r\n            //These '...' are to get al the elements of the state and the payload at the same time\r\n            return {\r\n                ...state,\r\n            userPedals: {...state.userPedals,\r\n                [Math.random().toString(36).substr(2, 9)]: {\r\n                    ...action.payload.newPedal\r\n                }\r\n            }\r\n            }\r\n\r\n\r\n        case SET_MOVEPEDAL:\r\n            const key = action.payload.id;\r\n            return {\r\n                ...state,\r\n                userPedals: {\r\n                    ...state.userPedals,\r\n                    [key]:{\r\n                        ...state.userPedals[key],\r\n                        left: action.payload.left,\r\n                        top: action.payload.top\r\n                    }\r\n                }\r\n            }\r\n        \r\n        case SET_DELETEPEDAL:\r\n            const key2 = action.payload;\r\n            return {\r\n                ...state,\r\n                userPedals: omit(state.userPedals,key2)\r\n            }\r\n\r\n        case SET_LOADPB:\r\n            return {\r\n                ...state,\r\n                userPedals: action.payload\r\n            }\r\n             \r\n             \r\n        default:    \r\n            return state\r\n    }\r\n}\r\n\r\n//ACTIONS\r\n\r\n\r\n//This function is actioned when a pedal is added to the PB\r\nexport const setAddPedalToPBAction = (image,width,height,pedalID) => async(dispatch, getState) => {\r\n\r\n    try{\r\n        const newPedal = {\r\n            image,\r\n            width,\r\n            height,\r\n            left: 0,\r\n            top: 0,\r\n            pedalID\r\n        }\r\n\r\n        dispatch({\r\n            type: SET_USERPB,\r\n            //With this we send all of the data of the PB Collection selected\r\n            payload: {newPedal}\r\n        })\r\n    }\r\n    catch(err){\r\n        console.log(err)\r\n    }\r\n    \r\n}\r\n\r\n//This function is for update the coordenates of pedal that was moved\r\nexport const setMovePedalAction = (id,left,top) => async(dispatch, getState) => {\r\n\r\n    try{\r\n        dispatch({\r\n            type: SET_MOVEPEDAL,\r\n            //With this we send all of the data of the PB Collection selected\r\n            payload: {id,left,top}\r\n            \r\n        })\r\n        \r\n    }\r\n    catch(err){\r\n        console.log(err)\r\n    }\r\n    \r\n}\r\n\r\n//This function is for remove the pedal for the users PB\r\nexport const setDeletePedalAction = (id) => async(dispatch, getState) => {\r\n\r\n    try{\r\n        dispatch({\r\n            type: SET_DELETEPEDAL,\r\n            //With this we send all of the data of the PB Collection selected\r\n            payload: id\r\n            \r\n        })\r\n        \r\n    }\r\n    catch(err){\r\n        console.log(err)\r\n    }\r\n    \r\n}\r\n\r\n//This function is for changing the state of user's PB to the loaded one\r\nexport const setLoadPBAction = (loadedPB) => async(dispatch, getState) => {\r\n\r\n    try{\r\n        dispatch({\r\n            type: SET_LOADPB,\r\n            //With this we send all of the data of the PB Collection selected\r\n            payload: loadedPB\r\n            \r\n        })\r\n        \r\n    }\r\n    catch(err){\r\n        console.log(err)\r\n    }\r\n    \r\n}","import {createStore, combineReducers, compose, applyMiddleware} from 'redux'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport pbReducer from './pbDucks'\r\nimport pedalReducer from './pedalDucks';\r\nimport userPBReducer from './userPBDucks';\r\n\r\nconst rootReducer = combineReducers({\r\n    pedalboard: pbReducer,\r\n    actualPedal: pedalReducer,\r\n    userPB: userPBReducer\r\n})\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default function generateStore() {\r\n    const store = createStore(rootReducer,composeEnhancers(applyMiddleware(thunk)))\r\n    return store;\r\n}","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport {db} from '../firebase';\r\n//For redux states\r\nimport {useDispatch,useSelector} from 'react-redux'\r\nimport {setPBAction} from '../redux/pbDucks';\r\nimport {setLoadPBAction} from '../redux/userPBDucks'\r\n//Material UI styles\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\n\r\nfunction SearchPB() {\r\n\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  //THIS SECTION IS FOR CONSULTING THE DB\r\n\r\n  //Seting the state for the actual pedalboard kind\r\n  const [pbs,setPbs] = React.useState([]);\r\n\r\n  //Seting the state for the saved PBs finded\r\n  const [savedPBs,setSavedPBs] = React.useState([]);\r\n\r\n  \r\n  React.useEffect(() => {\r\n\r\n    //If the page was previously consulted\r\n    if(localStorage.getItem(\"avPBs\")){\r\n      setPbs(JSON.parse(localStorage.getItem(\"avPBs\")))\r\n    }\r\n    else{\r\n      //Obtaining the types of PB's that are registered\r\n      const obtenerDatos = async () => {\r\n        try {\r\n          const data = await db.collection('pedalboards').get()\r\n          const arrayData = data.docs.map(doc => ({id:doc.id, ...doc.data()}))\r\n          setPbs(arrayData)\r\n          //Saving in localStorage for avoiding future extra consults\r\n          localStorage.setItem(\"avPBs\",JSON.stringify(arrayData))\r\n        } catch (error) {\r\n          console.log(error)\r\n        }\r\n      }\r\n      obtenerDatos() \r\n    }\r\n\r\n  },[])\r\n \r\n\r\n  //IN THIS SECTION WE MANAGE THE SELECT OF THE PB\r\n  const [pedalboard, setPedalBoard] = React.useState([]);\r\n  //Here we set the actual state value of the selected pedalboard\r\n  const handleChange = (event) => {\r\n    setPedalBoard(event.target.value);\r\n    dispatch(setPBAction(event.target.value));\r\n  };\r\n\r\n  //Here we manage the saved PB selected\r\n  const [loadedPB, setLoadedPB] = React.useState([]);\r\n  //Here we set the actual state value of the selected pedalboard\r\n  const handleChangeSPB = (event) => {\r\n    setLoadedPB(event.target.value);\r\n    dispatch(setPBAction(event.target.value.Pedalboard)); \r\n    dispatch(setLoadPBAction(event.target.value.Pedals));\r\n  };\r\n\r\n\r\n  //For consulting previously saved PB's\r\n  const [visibleSavedPBs, setVisibleSavedPBs] = React.useState(false)\r\n  const obtainSavedPBs = async () => {\r\n    try {\r\n      const data2 = await db.collection('userPBs').get()\r\n      const arrayData2 = data2.docs.map(doc => ({id:doc.id, ...doc.data()}))\r\n      setSavedPBs(arrayData2)\r\n      setVisibleSavedPBs(true)\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  //If the user saved the PB\r\n\r\n  //For consulting the pedals\r\n  const userPB = useSelector(store => store.userPB.userPedals)\r\n\r\n  const savePB = async () => {\r\n    var pbName = prompt(\"Please enter a name for the PB\")\r\n    console.log(pbName,\". Pedales:\",userPB,\"PB\",pedalboard)\r\n\r\n    const pbToSave = {\r\n      Name: pbName,\r\n      Pedals: userPB,\r\n      Pedalboard: pedalboard,\r\n      User: \"default\"\r\n    }\r\n\r\n    await db.collection('userPBs').add(pbToSave)\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    \r\n    <form noValidate autoComplete=\"off\">\r\n      <div>\r\n        {/*Save actual PB*/ }\r\n        \r\n        {visibleSavedPBs ?\r\n          /*Access to previously saved PB'ss*/ \r\n            \r\n            <TextField\r\n              select\r\n              id = \"savedPB\"\r\n              label=\"Saved PB's\"\r\n              value={loadedPB}\r\n              onChange={handleChangeSPB} \r\n            >\r\n              \r\n              {savedPBs.map((sPB) => (\r\n                <MenuItem key={sPB.id} value={sPB}>\r\n                  {sPB.Name}\r\n                </MenuItem>\r\n              ))}\r\n            </TextField> \r\n            : <Button onClick={() => obtainSavedPBs()} size=\"large\" color=\"primary\" variant=\"outlined\">Load PB</Button>\r\n        }<br/><br/>\r\n        \r\n        {/*Save actual PB*/ }\r\n          <Button onClick={() => savePB()} size=\"large\" color=\"primary\" variant=\"outlined\">SAVE PB</Button>\r\n      \r\n\r\n        {/*Select a kind of PB*/ }\r\n        <TextField\r\n          select\r\n          id = \"pbselect\"\r\n          label=\"PedalBoard\"\r\n          value={pedalboard}\r\n          onChange={handleChange} \r\n          helperText=\"Please select your Pedalboard\"\r\n        >\r\n          {pbs.map((option) => (\r\n            <MenuItem key={option.id} value={option.id}>\r\n              {option.PBName}\r\n            </MenuItem>\r\n          ))}\r\n        </TextField>\r\n      </div>\r\n    </form>\r\n    \r\n  );  \r\n\r\n  \r\n}\r\n\r\nexport default SearchPB;\r\n","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport {db} from '../firebase';\r\n//For redux states\r\nimport {useDispatch} from 'react-redux'\r\nimport {setPedalAction} from '../redux/pedalDucks'\r\n\r\n\r\nfunction SearchPedal() {\r\n\r\n\r\n//THIS SECTION IS FOR CONSULTING THE DB\r\n  //Seting the state for the finded pedals\r\n  const dispatch = useDispatch()\r\n  const [pedals,setPedals] = React.useState([]);\r\n\r\n  React.useEffect(() => {\r\n    \r\n  //If the page was previously consulted\r\n    if(localStorage.getItem(\"avPedals\")){\r\n      setPedals(JSON.parse(localStorage.getItem(\"avPedals\")))\r\n    }\r\n    else{\r\n      const obtenerDatos = async () => {\r\n        try {\r\n          const data = await db.collection('pedals').get()\r\n          const arrayData = data.docs.map(doc => ({id:doc.id, ...doc.data()}))\r\n          setPedals(arrayData)\r\n          //Saving in localStorage for avoiding future extra consults\r\n          localStorage.setItem(\"avPedals\",JSON.stringify(arrayData))\r\n  \r\n        } catch (error) {\r\n          console.log(error)\r\n        }\r\n      }\r\n      obtenerDatos()\r\n    }\r\n     \r\n  },[])\r\n\r\n\r\n//IN THIS SECTION WE MANAGE THE SELECTION OF THE PEDAL\r\n  const [selPedal, setSelPedal] = React.useState([]);\r\n  //Here we set the actual selected pedal\r\n  const handleChange = (event) => {\r\n    setSelPedal(event.target.value);\r\n    dispatch(setPedalAction(event.target.value)); \r\n  };\r\n\r\n\r\n  return (\r\n  \r\n    <form noValidate autoComplete=\"off\">\r\n      <div>\r\n\r\n        <TextField\r\n          select\r\n          id = \"pbselect\"\r\n          label=\"Pedal\"\r\n          value={selPedal}\r\n          onChange={handleChange} \r\n          helperText=\"Please select a pedal\"\r\n        >\r\n          {pedals.map((option) => (\r\n            <MenuItem key={option.id} value={option.id}>\r\n              {option.Name}\r\n            </MenuItem>\r\n          ))}\r\n        </TextField>\r\n\r\n\r\n      </div>\r\n    </form>\r\n    \r\n  );  \r\n\r\n  \r\n}\r\n\r\nexport default SearchPedal;\r\n","import React from 'react'\r\nimport {useSelector} from 'react-redux'\r\n//Styles for material UI\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ReactPlayer from \"react-player\";\r\nimport {useDispatch} from 'react-redux';\r\nimport {setAddPedalToPBAction} from '../redux/userPBDucks'\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n      minWidth: \"100%\",\r\n    },\r\n    bullet: {\r\n      display: 'inline-block',\r\n      margin: '0 2px',\r\n      transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n      fontSize: 14,\r\n    },\r\n    pos: {\r\n      marginBottom: 12,\r\n    },\r\n  });\r\n\r\n\r\n\r\nconst ActualPedal = () => {\r\n\r\n    //THIS SECTION IS FOR GETTING THE INFO OF THE SELECTED PEDAL\r\n    const actPedal = useSelector(store => store.actualPedal)\r\n    \r\n    //For Material UI Styles\r\n    const classes = useStyles();\r\n\r\n    //For Redux\r\n    const dispatch = useDispatch()\r\n\r\n    const styles = {\r\n        pedalImg: {\r\n            width: \"100%\"\r\n        },\r\n        video:{\r\n            width: \"100%\"\r\n        }\r\n    }\r\n\r\n    const addPedalToPB = () => {\r\n      dispatch(setAddPedalToPBAction(actPedal.Image, actPedal.Width, actPedal.Height, actPedal.id))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            \r\n            { //If there's no pedal, the card is not shown\r\n            actPedal.Name!==\"\" ? \r\n            <Card className={classes.root}>\r\n                <CardContent>\r\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                    Selected Pedal\r\n                    </Typography>\r\n                    <Typography variant=\"h5\" component=\"h4\">\r\n                    {actPedal.Name}\r\n                    </Typography>\r\n                    <Typography className={classes.pos} color=\"textSecondary\">\r\n                    {actPedal.Brand}\r\n                    </Typography>\r\n                    <img src={actPedal.Image} style={styles.pedalImg} alt=\"\"/>\r\n                    <Typography variant=\"subtitle2\" color=\"textSecondary\">\r\n                    {actPedal.Type}\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions style={{justifyContent: 'center'}}>\r\n                    <Button onClick={() => addPedalToPB()} size=\"large\" color=\"primary\" variant=\"outlined\">ADD</Button>\r\n                </CardActions>\r\n                <br/>\r\n                <ReactPlayer url={actPedal.Video} width=\"100%\" height=\"100%\" controls=\"true\"/>\r\n            </Card>\r\n            :\r\n            \"No pedal selected yet\"\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ActualPedal\r\n","export const ItemTypes = {\r\n    BOX: 'userPB',\r\n  }\r\n  ","import React from 'react'\r\nimport { useDrag } from 'react-dnd'\r\nimport { ItemTypes } from './ItemTypes'\r\nimport {useDispatch} from 'react-redux'\r\nimport {setPedalAction} from '../redux/pedalDucks'\r\nimport {setDeletePedalAction} from '../redux/userPBDucks'\r\n//Material UI\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\n\r\n\r\nconst style = {\r\n  position: 'absolute',\r\n  padding: '0.5rem 1rem',\r\n  cursor: 'move',\r\n  width: \"200px\",\r\n  height: \"300px\",\r\n  backgroundSize: \"100%\",\r\n  backgroundRepeat:\"no-repeat\"\r\n}\r\n\r\n\r\n\r\nexport const PedalContainer = ({ id, left, top, hideSourceOnDrag, children, image, pedalID }) => {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const selectActPedal = () => {\r\n    dispatch(setPedalAction(pedalID))\r\n  }\r\n\r\n  const deletePedal = () => {\r\n    dispatch(setDeletePedalAction(id))\r\n  }\r\n  \r\n  const [{ isDragging }, drag] = useDrag({\r\n    \r\n    item: { id, left, top, type: ItemTypes.BOX },\r\n    collect: (monitor) => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  })\r\n  if (isDragging && hideSourceOnDrag) {\r\n    \r\n    return <div ref={drag} />\r\n  }\r\n  return (\r\n    <div onClick={() => selectActPedal()} ref={drag} style={{ ...style, left, top, backgroundImage:`url(${image}` }}>\r\n      <IconButton onClick={() => deletePedal()} style={{position: 'absolute',top: \"-5%\", left:\"80%\"}} aria-label=\"delete\">\r\n        <CancelIcon/>\r\n      </IconButton>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport { useDrop } from 'react-dnd'\r\nimport { ItemTypes } from './ItemTypes'\r\nimport { PedalContainer } from './PedalContainer'\r\nimport {useSelector} from 'react-redux'\r\nimport {setMovePedalAction} from '../redux/userPBDucks'\r\nimport {useDispatch} from 'react-redux'\r\n\r\n\r\n\r\n\r\nexport const PBContainer = () => {\r\n\r\n  //Getting the actual PB from the store\r\n  const actPedalboard = useSelector(store => store.pedalboard.PBImage)\r\n\r\n    const styles = {\r\n      pbContainer: {\r\n          width: \"100%\",\r\n          height: \"1000px\",\r\n          backgroundSize: \"100%\",\r\n          backgroundImage: `url(${actPedalboard})`,\r\n          backgroundRepeat:\"no-repeat\"\r\n      }\r\n    };\r\n\r\n  //Getting the user's actual PB\r\n  const userPB = useSelector(store => store.userPB.userPedals)\r\n\r\n  //For Redux\r\n  const dispatch = useDispatch()\r\n\r\n  //Pedals movement\r\n  const [, drop] = useDrop({\r\n    accept: ItemTypes.BOX,\r\n    drop(item, monitor) {\r\n      const delta = monitor.getDifferenceFromInitialOffset()\r\n      const left = Math.round(item.left + delta.x)\r\n      const top = Math.round(item.top + delta.y)\r\n      moveBox(item.id, left, top)\r\n      return undefined\r\n    },\r\n  })\r\n\r\n//State changes\r\n  const moveBox = (id, left, top) => {  \r\n    dispatch(setMovePedalAction(id,left,top))\r\n  }\r\n\r\n\r\n  return (\r\n    \r\n    <div ref={drop} style={styles.pbContainer}>\r\n      \r\n      {Object.keys(userPB).map((key) => {\r\n        const { left, top, image, pedalID } = userPB[key]\r\n        \r\n        return (\r\n          \r\n          <PedalContainer\r\n            key={key}\r\n            id={key}\r\n            left={left}\r\n            top={top}\r\n            pedalID={pedalID}\r\n            image= {image}\r\n            hideSourceOnDrag=\"true\"\r\n          >\r\n          </PedalContainer>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n} \r\nexport default PBContainer;","//For Redux\r\nimport {Provider} from 'react-redux'\r\nimport generateStore from './redux/store'\r\n//For DND\r\nimport { DndProvider } from 'react-dnd'\r\nimport { HTML5Backend } from 'react-dnd-html5-backend'\r\n\r\n//Others\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SearchPB from './components/SearchPB';\r\nimport SearchPedal from './components/SearchPedal';\r\nimport ActualPedal from './components/ActualPedal';\r\nimport PBContainer from './components/PBContainer';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nexport default function FullWidthGrid() {\r\n  const classes = useStyles();\r\n\r\n\r\n  const store = generateStore() \r\n  return (\r\n    <Provider store ={store}>\r\n      <div className={classes.root}>\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={9}>\r\n          <Paper className={classes.paper}>\r\n            <h3 style={{textAlign: \"left\"}}>Pedalboard Planner</h3>\r\n          </Paper>\r\n          <br/>\r\n          <Paper className={classes.paper} >\r\n          <DndProvider backend={HTML5Backend}>\r\n            <PBContainer/>\r\n          </DndProvider>\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Paper className={classes.paper}>\r\n          <SearchPB/>\r\n          <SearchPedal/> \r\n          <br/>\r\n          <ActualPedal/>\r\n          <br/>\r\n          </Paper> \r\n        </Grid>    \r\n      </Grid>\r\n      </div>\r\n    </Provider>\r\n  );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx'\r\nimport './firebase'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}